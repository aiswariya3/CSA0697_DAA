#include <stdio.h>
#include <stdbool.h>

#define V 4  // Number of vertices in the graph

// Function to print the assigned colors
void printSolution(int color[]) {
    printf("Assigned colors are: ");
    for (int i = 0; i < V; i++) {
        printf("%d ", color[i]);
    }
    printf("\n");
}

// Function to check if the color can be assigned to vertex
bool isSafe(int v, bool graph[V][V], int color[], int c) {
    for (int i = 0; i < V; i++) {
        if (graph[v][i] && c == color[i])  // If adjacent vertex has the same color
            return false;
    }
    return true;
}

// A recursive utility function to solve the graph coloring problem
bool graphColoringUtil(bool graph[V][V], int m, int color[], int v) {
    if (v == V)  // If all vertices are assigned a color
        return true;

    // Try assigning different colors
    for (int c = 1; c <= m; c++) {
        if (isSafe(v, graph, color, c)) {
            color[v] = c;

            // Recur to assign colors to the rest of the vertices
            if (graphColoringUtil(graph, m, color, v + 1))
                return true;

            // If assigning color c doesn't lead to a solution, backtrack
            color[v] = 0;
        }
    }

    return false;
}

// This function solves the m Coloring problem using backtracking
bool graphColoring(bool graph[V][V], int m) {
    int color[V];
    for (int i = 0; i < V; i++)  // Initialize all colors as 0 (unassigned)
        color[i] = 0;

    // Call graphColoringUtil() to solve the problem
    if (!graphColoringUtil(graph, m, color, 0)) {
        printf("Solution does not exist.\n");
        return false;
    }

    // Print the solution if it exists
    printSolution(color);
    return true;
}

int main() {
    // Example adjacency matrix of a graph
    bool graph[V][V] = {
        {0, 1, 1, 1},
        {1, 0, 1, 0},
        {1, 1, 0, 1},
        {1, 0, 1, 0}
    };
    int m = 3;  // Number of colors

    // Call graph coloring function
    graphColoring(graph, m);

    return 0;
}
