#include <stdio.h>
#include <stdbool.h>

#define V 5  // Number of vertices in the graph

// Function to print the Hamiltonian circuit
void printSolution(int path[]) {
    printf("Hamiltonian Circuit: ");
    for (int i = 0; i < V; i++) {
        printf("%d ", path[i]);
    }
    printf("%d\n", path[0]);  // Print the starting vertex at the end to complete the circuit
}

// Utility function to check if the current vertex can be added to the path
bool isSafe(int v, bool graph[V][V], int path[], int pos) {
    // Check if this vertex is an adjacent vertex of the previously added vertex
    if (!graph[path[pos - 1]][v]) {
        return false;
    }

    // Check if the vertex has already been included in the path
    for (int i = 0; i < pos; i++) {
        if (path[i] == v) {
            return false;
        }
    }

    return true;
}

// Recursive utility function to solve the Hamiltonian Circuit problem
bool hamiltonianCycleUtil(bool graph[V][V], int path[], int pos) {
    // If all vertices are included in the path
    if (pos == V) {
        // Check if there is an edge from the last vertex to the first vertex
        if (graph[path[pos - 1]][path[0]]) {
            return true;
        } else {
            return false;
        }
    }

    // Try different vertices as the next candidate in the Hamiltonian Circuit
    for (int v = 1; v < V; v++) {
        if (isSafe(v, graph, path, pos)) {
            path[pos] = v;

            // Recur to construct the rest of the path
            if (hamiltonianCycleUtil(graph, path, pos + 1)) {
                return true;
            }

            // If adding vertex v doesn't lead to a solution, remove it (backtrack)
            path[pos] = -1;
        }
    }

    return false;
}

// Function to solve the Hamiltonian Circuit problem
bool hamiltonianCycle(bool graph[V][V]) {
    int path[V];

    // Initialize the path with -1
    for (int i = 0; i < V; i++) {
        path[i] = -1;
    }

    // Start the Hamiltonian Circuit with the first vertex
    path[0] = 0;

    if (!hamiltonianCycleUtil(graph, path, 1)) {
        printf("Solution does not exist.\n");
        return false;
    }

    // Print the solution if it exists
    printSolution(path);
    return true;
}

int main() {
    // Example graph represented as an adjacency matrix
    bool graph[V][V] = {
        {0, 1, 0, 1, 1},
        {1, 0, 1, 1, 0},
        {0, 1, 0, 1, 1},
        {1, 1, 1, 0, 1},
        {1, 0, 1, 1, 0}
    };

    // Find and print the Hamiltonian Circuit
    hamiltonianCycle(graph);

    return 0;
}
