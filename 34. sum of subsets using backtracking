#include <stdio.h>

#define MAX 100

// Function to print a solution subset
void printSubset(int subset[], int size) {
    printf("{ ");
    for (int i = 0; i < size; i++) {
        printf("%d ", subset[i]);
    }
    printf("}\n");
}

// Backtracking function to find subsets
void subsetSum(int set[], int subset[], int n, int subSize, int total, int nodeIndex, int target) {
    if (total == target) {  // If subset sum matches the target
        printSubset(subset, subSize);
        return;
    }
    
    for (int i = nodeIndex; i < n; i++) {
        if (total + set[i] <= target) {
            subset[subSize] = set[i];  // Add the element to subset
            subsetSum(set, subset, n, subSize + 1, total + set[i], i + 1, target);  // Recur for the next element
        }
    }
}

int main() {
    int set[MAX], subset[MAX], n, target;
    
    // Input number of elements in set
    printf("Enter the number of elements in the set: ");
    scanf("%d", &n);
    
    // Input elements of the set
    printf("Enter the elements of the set:\n");
    for (int i = 0; i < n; i++) {
        scanf("%d", &set[i]);
    }
    
    // Input the target sum
    printf("Enter the target sum: ");
    scanf("%d", &target);
    
    printf("Subsets that sum to %d are:\n", target);
    subsetSum(set, subset, n, 0, 0, 0, target);  // Start backtracking
    
    return 0;
}
